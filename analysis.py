"""
Please feel free to use the code without citing or crediting the author(s) mentioned below. Cheers to science :-)
I'd be happy to hear from you about how to improve this code, and as to how the code may have been useful to you.
	
Author: Vipin P. Veetil
Contact: vipin.veetil@gmail.com
	
Paper title: Out-of-equilibrium dynamics with heterogeneous capital goods
Paper URL: http://papers.ssrn.com/sol3/papers.cfm?abstract_id=2600648
	
Language: Python
	
Module name: analysis
Module description: analysis the data generated by the simulation
"""

from __future__ import division
import pandas as pd
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import random as random
import numpy as np

stock_price = pd.read_csv('stock_price.csv')
stochastic_stock_price = pd.read_csv('stochastic_stock_price.csv')
stochastic_variance = pd.read_csv('stochastic_variance.csv')

stock_price = pd.DataFrame(stock_price)
stochastic_stock_price = pd.DataFrame(stochastic_stock_price)
stochastic_variance = pd.DataFrame(stochastic_variance)

exponent_ratio = stock_price['exponent']
stock_ratio = stock_price['stock']
price_ratio = stock_price['price']

stochastic_exponent_ratio = stochastic_stock_price['exponent']
stochastic_stock_ratio = stochastic_stock_price['stock']
stochastic_price_ratio = stochastic_stock_price['price']

volatility = stochastic_variance['volatility']
cv_stock_ratio = stochastic_variance['stock']
cv_price_ratio = stochastic_variance['price']




fit_stock_ratio = np.polyfit(exponent_ratio, stock_ratio, 2)
fit_stock_ratio_fn = np.poly1d(fit_stock_ratio)
plt.scatter(exponent_ratio,stock_ratio,marker='o',facecolor='black',s=30)
plt.scatter(exponent_ratio,fit_stock_ratio_fn(exponent_ratio),marker='.',facecolor='red',s=20)
plt.xlabel('Ratio of Cobb-Douglas Exponents for Producing Capital Goods', fontsize = 18)
plt.ylabel('Capital Stock Ratio',fontsize = 18)
plt.title('Capital Stock with Deterministic Demand for Good',fontsize = 20)
plt.tick_params(axis='both',labelsize=16)
plt.text(0.7,1.1,'$y = 0.15 + 1.30 x - 0.47 x^2 $',fontsize = 14,color='red')
plt.grid()
plt.show()


fit_price_ratio = np.polyfit(exponent_ratio, price_ratio, 2)
fit_price_ratio_fn = np.poly1d(fit_price_ratio)
plt.scatter(exponent_ratio,price_ratio,marker='o',facecolor='black',s=30)
plt.scatter(exponent_ratio,fit_price_ratio_fn(exponent_ratio),marker='.',facecolor='red',s=20)
plt.xlabel('Ratio of Cobb-Douglas Exponents for Producing Capital Goods', fontsize = 18)
plt.ylabel('Capital Price Ratio',fontsize = 18)
plt.title('Capital Price with Deterministic Demand for Good',fontsize = 20)
plt.tick_params(axis='both',labelsize=16)
plt.text(0.7,1.1,'$y = 0.22 + 1.37 x - 0.61 x^2 $',fontsize = 14,color='red')
plt.grid()
plt.show()




fit_stochastic_stock_ratio = np.polyfit(stochastic_exponent_ratio, stochastic_stock_ratio, 2)
fit_stochastic_stock_ratio_fn = np.poly1d(fit_stochastic_stock_ratio)
plt.scatter(stochastic_exponent_ratio,stochastic_stock_ratio,marker='o',facecolor='black',s=30)
plt.scatter(stochastic_exponent_ratio,fit_stochastic_stock_ratio_fn(stochastic_exponent_ratio),marker='.',facecolor='red',s=20)
plt.xlabel('Ratio of Cobb-Douglas Exponents for Producing Capital Goods', fontsize = 18)
plt.ylabel('Capital Stock Ratio',fontsize = 18)
plt.title('Capital Stock with Stochastic Demand for Good',fontsize = 20)
plt.tick_params(axis='both',labelsize=16)
plt.text(0.7,1.1,'$y = 0.15 + 1.29 x - 0.46 x^2 $',fontsize = 14,color='red')
plt.text(0.5,1.05,'Volatility of Demand for Good = 0.1', fontsize = 14,color='black')
plt.grid()
plt.show()

fit_stochastic_price_ratio = np.polyfit(stochastic_exponent_ratio, stochastic_price_ratio, 2)
fit_stochastic_price_ratio_fn = np.poly1d(fit_stochastic_price_ratio)
plt.scatter(stochastic_exponent_ratio,stochastic_price_ratio,marker='o',facecolor='black',s=30)
plt.scatter(stochastic_exponent_ratio,fit_stochastic_price_ratio_fn(stochastic_exponent_ratio),marker='.',facecolor='red',s=20)
plt.xlabel('Ratio of Cobb-Douglas Exponents for Producing Capital Goods', fontsize = 18)
plt.ylabel('Capital Price Ratio',fontsize = 18)
plt.title('Capital Price with Stochastic Demand for Good',fontsize = 20)
plt.tick_params(axis='both',labelsize=16)
plt.text(0.7,1.1,'$y = 0.23 + 1.35 x - 0.59 x^2 $',fontsize = 14,color='red')
plt.text(0.5,1.05,'Volatility of Demand for Good = 0.1', fontsize = 14,color='black')
plt.grid()
plt.show()



fit_CV_stock_ratio = np.polyfit(volatility, cv_stock_ratio, 1)
fit_CV_stock_ratio_fn = np.poly1d(fit_CV_stock_ratio)
plt.scatter(volatility,cv_stock_ratio,marker='o',facecolor='black',s=30)
plt.scatter(volatility,fit_CV_stock_ratio_fn(volatility),marker='.',facecolor='red',s=20)
plt.xlabel('Volatility of Goods Demand', fontsize = 18)
plt.ylabel('Coefficient of Variation of Capital Stock Ratio',fontsize = 18)
plt.title('Variability in Capital Stock',fontsize = 20)
plt.tick_params(axis='both',labelsize=16)
plt.text(0.20,0.14,'$y = 0.03 + 0.29 x$',fontsize = 14,color='red')
plt.grid()
plt.show()


fit_CV_price_ratio = np.polyfit(volatility, cv_price_ratio, 1)
fit_CV_price_ratio_fn = np.poly1d(fit_CV_price_ratio)
plt.scatter(volatility,cv_price_ratio,marker='o',facecolor='black',s=30)
plt.scatter(volatility,fit_CV_price_ratio_fn(volatility),marker='.',facecolor='red',s=20)
plt.xlabel('Volatility of Goods Demand', fontsize = 18)
plt.ylabel('Coefficient of Variation of Capital Price Ratio',fontsize = 18)
plt.title('Variability in Capital Price',fontsize = 20)
plt.tick_params(axis='both',labelsize=16)
plt.text(0.20,0.26,'$y = 0.19 + 0.07 x$',fontsize = 14,color='red')
plt.grid()
plt.show()




